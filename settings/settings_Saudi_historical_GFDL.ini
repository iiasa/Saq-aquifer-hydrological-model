# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------


[OPTIONS]
#-------------------------------------------------------
# OPTION - to switch on/off

#-------------------------------------------------------

# Data otions
# if temperature is stored in Kelvin instead Celsius
TemperatureInKelvin = True
# if lat/lon the area has to be user defined = precalculated
gridSizeUserDefined = True

#-----------------------------------------------
# Evaporation: calculate pot. evaporation (True) or use precalculated pot.evaporation map stacks (False)
calc_evaporation = True

#-----------------------------------------------
# Irrigation and water demand

# if irrigation is included, otherwise paddy and non paddy is put into 'grassland'
includeIrrigation = True
static_irrigation_map = True
# if water demand from irrigation, industry and domestic is included
includeWaterDemand = True
includeIndusDomesDemand = True
# Water allocation
# if water demand and availability is calculated for region to compare demand vs. avail
usingAllocSegments = False
# limit abstraction to available groundwater (True) include fossil groundwater (False)
limitAbstraction = True

sectorSourceAbstractionFractions = True

# Environmental Flow
calc_environflow = False

#-----------------------------------------------
# Soil 
# use preferential flow, that bypasses the soil matrix and drains directly to the groundwater (not for irrPaddy)
preferentialFlow = True
# Capillar rise
CapillarRise = True

#-----------------------------------------------
# Routing

# if runoff concentration to the edge of a cell is included
includeRunoffConcentration = True
# Waterbodies like lakes and reservoirs
includeWaterBodies = True
# kinematic wave routing, if False no routing is calculated
includeRouting = True

#-----------------------------------------------
# Inflow from outside of the modelled area
inflow = False

# --- Reporting & Debugging ------------------- ----------------------------------------------
# Reporting options
writeNetcdfStack = True
reportMap = True
reportTss = True 
# Checking water balance (for debugging)
calcWaterBalance = False
sumWaterBalance = False
# use additional PCRaster GIS commands
PCRaster = False

modflow_coupling = True
use_complex_solver_for_modflow = True
#-------------------------------------------------------
# DEFINITIONS OF PARAMETERS
#-------------------------------------------------------

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------
PathRoot = ../CWATM_data

PathOut = ./Outputs/Historical_GFDL
PathMaps = P:/watmodel/CWATM/cwatm_input_5min2
#PathMeteo = P:/watmodel/CWATM/Saudi_Arabia/meteo_mswx
PathMeteo = P:\watxene\ISIMIP\ISIMIP3b\InputData\climate_updated\bias-adjusted\historical\GFDL-ESM4

#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Rhine Water Model - WATCH WDFEI
metaNetcdfFile = P:\watmodel\CWATM\model\FUSE\CWATM_priv\cwatm/metaNetcdf.xml

#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# Area mask
# A pcraster map, tif or netcdf map e.g.  $(FILE_PATHS:PathRoot)/data/areamaps/area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 
#MaskMap = P:/watmodel/CWATM/Saudi_Arabia/temp/saudi_basin.tif
#MaskMap = P:/watmodel/CWATM/Saudi_Arabia/SaudiMask.tif
#MaskMap = 14 12 0.5 5.0 52.0 6.11 51.84
MaskMap = P:/watmodel/CWATM/Saudi_Arabia/mask_saq.tif


#-------------------------------------------------------
# Station data
# either a map e.g. $(FILE_PATHS:PathRoot)/data/areamaps/area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )
# Lobith/Rhine
Gauges = 40 27

# if .tif file for gauges, this is a flag if the file is global or local
# e.g. Gauges = $(FILE_PATHS:PathRoot)/data/areamaps/gaugesRhine.tif
GaugesLocal = True
#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart has to be a date e.g. 01/06/1990
# SpinUp or StepEnd either date or numbers 
# SpinUp: from this date output is generated (up to this day: warm up)

#StepStart = 1/1/1981
#SpinUp = 1/3/2002
#StepEnd = 31/12/2021

#StepStart = 1/3/2002
#SpinUp = None
#StepEnd = 31/12/2021

StepStart = 01/01/1987
SpinUp = None
StepEnd = 31/12/2014
#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

# for a warm start initial variables a loaded
# e.g for a start on 01/01/2010 load variable from 31/12/2009
load_initial = True
#initLoad = P:\watmodel\CWATM\Saudi_Arabia\init\Saudi_Arabia_20161006.nc
initLoad = P:\watmodel\CWATM\Saudi_Arabia\init\Saudi_Arabia_20211231.nc

# saving variables from this run, to initiate a warm start next run
# StepInit = saving date, can be more than one: 10/01/1973 20/01/1973
save_initial = False
save_init_water_table = False
initSave = P:\watmodel\CWATM\Saudi_Arabia\init\Saudi_Arabia
StepInit = 31/12/2021

#-------------------------------------------------------
# CALIBARTION PARAMETERS
#-------------------------------------------------------
[CALIBRATION]

# These are parameter which are used for calibration
# could be any parameter, but for an easier overview, tehey are collected here
# in the calibration template a placeholder (e.g. %arnoBeta) instead of value

PathCali = C:/Data/CWatM/calibration/lakevictoria5min

# Snow  
SnowMeltCoef = 0.0027
# Cropf factor correction  
crop_correct =  1.6
#Soil
soildepth_factor = 1.28
#Soil preferentialFlowConstant = 4.0, arnoBeta_add = 0.1
preferentialFlowConstant = 4.5
arnoBeta_add = 0.19
# interflow part of recharge factor = 1.0
factor_interflow = 2.8
# groundwater recessionCoeff_factor = 1.0
recessionCoeff_factor = 5.278
# runoff concentration factor runoffConc_factor = 1.0
runoffConc_factor = 0.1
#Routing manningsN Factor to Manning's roughness = 1.0 [0.1-10.]
manningsN = 1.86
normalStorageLimit = 0.44
# lake parameter - factor to alpha: parameter of of channel width and weir coefficient  [0.33 - 3.] dafault 1.
lakeAFactor = 0.33
# lake parameter - factor for wind evaporation
lakeEvaFactor = 1.52
#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)/routing/ldd.map

# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)/landsurface/topo/elvstd.map

# Area of pixel [m2] (for lat/lon every cell has a different area)
CellArea = $(FILE_PATHS:PathMaps)/landsurface/topo/cellarea.nc

#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]
# precipitation [kg m-2 s-1]
PrecipitationMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_pr*
# average daily temperature [K]
TavgMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_tas_*

# ----------------------------------------
# This is used if calc_evaporation = False

# daily reference evaporation (free water) 
E0Maps = $(FILE_PATHS:PathMeteo)/EWRef_rhine.nc
#E0Maps = $(FILE_PATHS:PathMeteo)/EWRef_daily*
# daily reference evapotranspiration (crop) 
ETMaps = $(FILE_PATHS:PathMeteo)/ETRef_rhine.nc
#ETMaps = $(FILE_PATHS:PathMeteo)/ETRef_daily*

# --------------------------------
# from kg m-2s-1 to m : 86.4
precipitation_coversion = 86.4

# from MM to m : 0.001
#precipitation_coversion = 0.001

evaporation_coversion = 1.00

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = Precipitation, prec1

#-------------------------------------------------------
# CALCULATE EVAPORATION - PENMAN - MONTEITH
#-------------------------------------------------------
[EVAPORATION]

# This is used if calc_evaporation = True
# use albedo maps
albedo = True
albedoMaps = $(FILE_PATHS:PathMaps)/landsurface/albedo/albedo.nc 

# if not albedo maps use fixed albedo
# Albedo of bare soil surface (Supit et. al.)
AlbedoSoil = 0.15
# Albedo of water surface (Supit et. al.)
AlbedoWater = 0.05
# Albedo of vegetation canopy (FAO,1998)
AlbedoCanopy = 0.23

# use specific humidity (TRUE) QAir,  or relative humidity (FALSE) - rhs
useHuss = True

# map stacks Temperature [K}]
TminMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_tasmin*
TmaxMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_tasmax*
# Instantaneous surface pressure[Pa]
PSurfMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_ps*
# 2 m istantaneous specific humidity[kg /kg] (QAir) or relative humidity [%] (rhs)
#RhsMaps = $(FILE_PATHS:PathMeteo)/gswp3-w5e5_obsclim_huss*
QAirMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_huss*
# wind speed maps at 10m [m/s]
WindMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_sfcwind*
# radiation surface downwelling shortwave maps  [W/m2]
RSDSMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_rsds*
# radiation surface downwelling longwave maps [W/m2] [W/m2]
RSDLMaps = $(FILE_PATHS:PathMeteo)/gfdl-esm4_r1i1p1f1_w5e5_historical_rlds*

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = EWRef, ETRef, temp, prec

#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Number of vertical Snow layers
NumberSnowLayers = 7
# up to which layer the ice melt is calculated with the middle temperature
GlacierTransportZone = 3

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0065 
# Multiplier applied to precipitation that falls as snow
SnowFactor = 1.0
# Range [m C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 0.001
# Average temperature at which snow melts
TempMelt =1.0
# Average temperature below which precipitation is snow
TempSnow = 1.0
# Snow melt coefficient: default: 4.0 
# SRM: 0.0045 m/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.

# use in CALIBRATION -> copied to CALIBRATION
#SnowMeltCoef = 0.004
IceMeltCoef  = 0.007

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone 1-7 [mm]  - SnowCoverIni

[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
FrostIndexThreshold = 56

#--------------------------------------------------------------
# INITIAL CONDITIONS: FrostIndexIni

[VEGETATION]
cropgroupnumber = $(FILE_PATHS:PathMaps)/soil/cropgrp.nc
# soil water depletion fraction, Van Diepen et al., 1988: WOFOST 6.0, p.86, Doorenbos et. al 1978

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps)/landsurface/topo
PathSoil = $(FILE_PATHS:PathMaps)/soil


# Topography mapsNetcdf/maps
# tangent slope, slope length and orographybeta 
tanslope = $(PathTopo)/tanslope.map
slopeLength = $(PathTopo)/slopeLength.map

# maps of relative elevation above flood plains
relativeElevation = $(PathTopo)/dzRel_5min_detrended.nc

# Soil hydraulic properties

# soil (Hypres pedotransfer function - http://esdac.jrc.ec.europa.eu/ESDB_Archive/ESDBv2/popup/hy_param.htm)
# Alpha: an Genuchten’s shape parameter
#Lambda: an Genuchten’s shape parameter = n-1-> n = lamda+1, m = 1 - (1/n)
# thetas  is the volumetric water content θ saturated 
# thetar is the volumetric water content θ residual 

KSat1 = $(PathSoil)/ksat1_5min.nc
KSat2 = $(PathSoil)/ksat2_5min.nc
KSat3 = $(PathSoil)/ksat3_5min.nc
alpha1 = $(PathSoil)/alpha1_5min.nc
alpha2 = $(PathSoil)/alpha2_5min.nc
alpha3 = $(PathSoil)/alpha3_5min.nc
lambda1 = $(PathSoil)/lambda1_5min.nc
lambda2 = $(PathSoil)/lambda2_5min.nc
lambda3 = $(PathSoil)/lambda3_5min.nc
thetas1 = $(PathSoil)/thetas1_5min.nc
thetas2 = $(PathSoil)/thetas2_5min.nc
thetas3 = $(PathSoil)/thetas3_5min.nc
thetar1 = $(PathSoil)/thetar1_5min.nc
thetar2 = $(PathSoil)/thetar2_5min.nc
thetar3 = $(PathSoil)/thetar3_5min.nc

percolationImp = $(PathSoil)/percolationImp.map

maxGWCapRise    = 5.0

minCropKC        = 0.2
minTopWaterLayer = 0.0

# Soil depth
StorDepth1 = $(PathSoil)/storageDepth1.map
StorDepth2 = $(PathSoil)/storageDepth2.map

# preferential flow (between 1.0 and 8.0)
# used in CALIBRATION -> copied to CALIBRATION
#preferentialFlowConstant = 4.0

#-------------------------------------------------------
[LANDCOVER]
PathLandcover = $(FILE_PATHS:PathMaps)/landsurface

coverTypes = forest, grassland, irrPaddy, irrNonPaddy, sealed, water
coverTypesShort = f, g, i, n, s, w
fractionLandcover = $(PathLandcover)/fractionLandcover.nc

# Landcover can vary from year to year
dynamicLandcover = True
# if landcover cannot vary, which year should be taken as fixed year
fixLandcoverYear = 1961

#-------------------------------------------------------

[__forest]
PathForest = $(FILE_PATHS:PathMaps)/landcover/forest
PathSoil =  $(FILE_PATHS:PathMaps)/soil

# Parameters for the Arno's scheme 
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this 
# range [0.01 - 1.2]
forest_arnoBeta = 0.2

#forest_soil
forest_KSat1 = $(PathSoil)/ksat1_5min.nc
forest_KSat2 = $(PathSoil)/ksat2_5min.nc
forest_KSat3 = $(PathSoil)/ksat3_5min.nc
forest_alpha1 = $(PathSoil)/alpha1_5min.nc
forest_alpha2 = $(PathSoil)/alpha2_5min.nc
forest_alpha3 = $(PathSoil)/alpha3_5min.nc
forest_lambda1 = $(PathSoil)/lambda1_5min.nc
forest_lambda2 = $(PathSoil)/lambda2_5min.nc
forest_lambda3 = $(PathSoil)/lambda3_5min.nc
forest_thetas1 = $(PathSoil)/thetas1_5min.nc
forest_thetas2 = $(PathSoil)/thetas2_5min.nc
forest_thetas3 = $(PathSoil)/thetas3_5min.nc
forest_thetar1 = $(PathSoil)/thetar1_5min.nc
forest_thetar2 = $(PathSoil)/thetar2_5min.nc
forest_thetar3 = $(PathSoil)/thetar3_5min.nc

# other paramater values
forest_minInterceptCap  = 0.001
forest_cropDeplFactor   = 0.0

forest_fracVegCover  = $(PathForest)/fracVegCover.map
forest_rootFraction1 = $(PathForest)/rootFraction1.map
forest_rootFraction2 = $(PathForest)/rootFraction2.map
#forest_maxRootDepth  = 2.0
forest_maxRootDepth  = $(PathForest)/maxRootDepth.map
forest_minSoilDepthFrac = $(PathForest)/minSoilDepthFrac.map


forest_cropCoefficientNC = $(PathForest)/cropCoefficientForest_10days.nc
forest_interceptCapNC    = $(PathForest)/interceptCapForest_10days.nc

# initial conditions: forest_interceptStor, forest_w1, forest_w2, forest_w3, 


[__grassland]
PathGrassland = $(FILE_PATHS:PathMaps)/landcover/grassland

# Parameters for the Arno's scheme: 
grassland_arnoBeta = 0.0
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values

grassland_minInterceptCap  = 0.001
grassland_cropDeplFactor   = 0.0

grassland_fracVegCover  = $(PathGrassland)/fracVegCover.map
grassland_rootFraction1 = $(PathGrassland)/rootFraction1.map
grassland_rootFraction2 = $(PathGrassland)/rootFraction2.map
grassland_maxRootDepth  = $(PathGrassland)/maxRootDepth.map
grassland_minSoilDepthFrac = $(PathGrassland)/minSoilDepthFrac.map


grassland_cropCoefficientNC = $(PathGrassland)/cropCoefficientGrassland_10days.nc
grassland_interceptCapNC    = $(PathGrassland)/interceptCapGrassland_10days.nc

# initial conditions: grassland_interceptSto, grassland_w1, grassland_w2, grassland_w3


[__irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps)/landcover/irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values

irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0

irrPaddy_fracVegCover  = $(PathIrrPaddy)/fracVegCover.map
irrPaddy_rootFraction1 = $(PathIrrPaddy)/rootFraction1.map
irrPaddy_rootFraction2 = $(PathIrrPaddy)/rootFraction2.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)/maxRootDepth.map
irrPaddy_minSoilDepthFrac = $(PathIrrPaddy)/minSoilDepthFrac.map

irrPaddy_cropCoefficientNC = $(PathIrrPaddy)/cropCoefficientirrPaddy_10days.nc

# maximum flooding depth for paddy
irrPaddy_maxtopwater = 0.05



# initial conditions: irrPaddy_interceptStor, irrPaddy_w1, irrPaddy_w2, irrPaddy_w3



[__irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps)/landcover/irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values


irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0

#irrNonPaddy_fracVegCover  = P:/watmodel/CWATM/Saudi_Arabia/irrigation_5min.tif
irrNonPaddy_fracVegCover  = P:/watmodel/CWATM/Saudi_Arabia/irrigation_SAQ_whole.tif
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)/rootFraction1.map
irrNonPaddy_rootFraction2 = $(PathIrrNonPaddy)/rootFraction2.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)/maxRootDepth.map
irrNonPaddy_minSoilDepthFrac = $(PathIrrNonPaddy)/minSoilDepthFrac.map


irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)/cropCoefficientirrNonPaddy_10days.nc


# initial conditions: irrNonPaddy_interceptStor, irrNonPaddy_w1, irrNonPaddy_w2, irrNonPaddy_w3


[__sealed]
PathSealed = $(FILE_PATHS:PathMaps)/landcover/sealed

sealed_minInterceptCap  = 0.001

# initial conditions: sealed_interceptStor


[__open_water]
PathWater = $(FILE_PATHS:PathMaps)/landcover/water

water_minInterceptCap  = 0.0

#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps)/groundwater

recessionCoeff = $(PathGroundwater)/recessionCoeff.map
# baseflow = recessionCoeff * storage groundwater
specificYield = $(PathGroundwater)/specificYield.map
kSatAquifer = $(PathGroundwater)/kSatAquifer.map
# both not used at the moment in groundwater modul, but already loaded


#-------------------------------------------------------
[GROUNDWATER_MODFLOW]
#-------------------------------------------------------

#Executable Modflow file
#path_mf6dll = C:\nonGithub\Modflow6\mf6\win64
path_mf6dll = P:\watmodel\Modflow\mf6
#path_mf6dll = P:\watmodel\Modflow\linux

# Path of Modflow input and output
#PathGroundwaterModflow = C:/Data/CWatM/Modflow/Saudi/1000m
PathGroundwaterModflow = P:/watmodel/CWATM/Saudi_Arabia/Modflow/2500m
PathGroundwaterModflowOutput = $(PathGroundwaterModflow)/output_2

PathGroundwaterModflowInput = $(PathGroundwaterModflow)
#PathGroundwaterModflowInput = $(PathGroundwaterModflow)/500m

# write modflow eror to file
writeModflowError = True

##  --- Steady state begin -----------------------
# soil humidity should not be high when starting to avoid to much pumping demand at the begining (between 0 and 1, 0.75 seems nice)
start_soil_humid = 0.5
# load an initial water table (in meter)
load_init_water_table = True
# if False, initial_water_table_depth (in m) is used on all the grid
#initial_water_table_depth = $(PathGroundwaterModflowInput)/modflow_depth0_totalend.nc; $(PathGroundwaterModflowInput)/modflow_depth1_totalend.nc
initial_water_table_depth = 0; 0
# if True, init_water_table is the initial water table file (2D numpy format (row, col))
init_water_table = P:\watmodel\CWATM\Saudi_Arabia\init\Saudi_Arabia_modflow_20000201.npy
#init_water_table = P:\watmodel\CWATM\Saudi_Arabia\init\Saudi_Arabia_modflow_20211231.npy
# Defining the upper limit of the groundwater layer
use_soildepth_as_GWtop = True
correct_soildepth_underlakes = False
depth_underlakes = 2

# Pumping file (a 3D numpy array where 1st dim is time, then, 1st col = ModFlow row index, 2nd col = ModFlow col index, 3rd col = pumping rates < 0 !!!! in m3/day)
Groundwater_pumping = True
# if ModFlow cells under the CWatM cell are less saturated than 1-water_table_limit_for_pumping, we prevent pumping
water_table_limit_for_pumping = 0.2
#Updated from 0.5

#pump_location = 0;1

# Prefix of the modflow files
nameModflowModel = Saudi_1km
#ModFlow model's resolution [meter]
Modflow_resolution = 2500 #changeResolution

# timestep of every Modflow execution
modflow_timestep = 1

load_modflow_from_disk = False
# Number of layers
nlay = 2


# Data for specified resolution
cwatm_modflow_indices = $(PathGroundwaterModflowInput)/indices
modflow_basin = $(PathGroundwaterModflowInput)/modflow_basin.tif
topo_modflow = $(PathGroundwaterModflowInput)/elevation_modflow.tif
chanRatio = $(PathGroundwaterModflowInput)/modlfow_river_percentage.tif


# We assume a confined aquifer, the unique parameters are transmissivity, porosity and thickness
# Processing thickness map for ModFlow-Flopy format #
# Thickness (default = 400) otherwise use maps from Gleeson et al.
thickness = $(PathGroundwaterModflowInput)/Saq_layer_1.tif; $(PathGroundwaterModflowInput)/Saq_thickness_1.tif
#thickness = $(PathGroundwaterModflowInput)/Saq_thickness_1.tif; $(PathGroundwaterModflowInput)/Saq_thickness_1.tif
# 800; 1200
# Processing porosity map for ModFlow-Flopy format (default = 0.1)
#poro = $(FILE_PATHS:PathMaps)/areamaps/parameter/Poro.txt
poro = 0.04; 0.06
#Processing permeability map for ModFlow-Flopy format (default = 10E-5)
permeability = 1e-07; 1e-05 
specific_storage = 2.1e-06; 2.1e-06 

# leakage under lake and rivers in m/day
leakageriver_permea = 0.05
leakagelake_permea = 0.05

#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

PathWaterdemand = $(FILE_PATHS:PathMaps)/landsurface/waterDemand
# For water demand vs. availability: areas have to be aggregated
# Allocation map
allocSegments = $(PathWaterdemand)/catchx.nc

# Demand in m/day [True] (default) or as mio m3 per year or month [False]
demand_unit = False

# Demand data monthly or yearly, as  m day-1 or mio m3 per month
domesticWaterDemandFile = $(PathWaterdemand)/historical_dom_year_millionm3_5min_1961_2010.nc
#domesticWaterDemandFile = $(PathWaterdemand)/ssp1_dom_year_millionm3_5min_2005_2060.nc
# time = True for monthly, False for yearly
domesticTimeMonthly = False
# name of the variable Withrawal = Gross, consumption = Netto
domesticWithdrawalvarname = domWW
domesticConsuptionvarname = domCon

industryWaterDemandFile = $(PathWaterdemand)/historical_ind_year_millionm3_5min_1961_2010.nc
#industryWaterDemandFile = $(PathWaterdemand)/ssp1_ind_year_millionm3_5min_2005_2060.nc
industryTimeMonthly = False
industryWithdrawalvarname = indWW
industryConsuptionvarname = indCon

uselivestock = True
livestockWaterDemandFile = $(PathWaterdemand)/historical_liv_year_millionm3_5min_1961_2010.nc
livestockTimeMonthly = False 
livestockvarname = livestockConsumption

#irrNonPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
#irrPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc

# using environmental flow (EF) (per month) as input value
# EF will be treated as one part of overall water demand
use_environflow = False
EnvironmentalFlowFile = $(FILE_PATHS:PathOut)/MQ90_12month.nc

irrNonPaddy_efficiency = 0.7
irrPaddy_efficiency = 0.6
irrigation_returnfraction = 0.1

swAbstractionFraction_Channel_Domestic = 0
swAbstractionFraction_Channel_Livestock = 1
swAbstractionFraction_Channel_Industry = 1
swAbstractionFraction_Channel_Irrigation = 1.0

swAbstractionFraction_Lake_Domestic = 1
swAbstractionFraction_Lake_Livestock = 1
swAbstractionFraction_Lake_Industry = 1
swAbstractionFraction_Lake_Irrigation = 1

swAbstractionFraction_Res_Domestic = 1
swAbstractionFraction_Res_Livestock = 1
swAbstractionFraction_Res_Industry = 0
swAbstractionFraction_Res_Irrigation = 1

gwAbstractionFraction_Domestic = 1
gwAbstractionFraction_Livestock = 1
gwAbstractionFraction_Industry = 1
gwAbstractionFraction_Irrigation = 1

# -----------------------------------------------------------
# Estimate of fractions of groundwater and surface water abstractions
# Either a fixed fraction for surface water abstration
# based on fraction of average baseflow and upstream average discharge 
# if swAbstractionFrac < 0: fraction is taken from baseflow / discharge 
# if swAbstractionFrac > 0 this value is taken as a fixed value 
swAbstractionFrac = 0.9
averageDischarge = $(FILE_PATHS:PathOut)/discharge_totalavg_rhine30min.nc
# in [m3/s]
averageBaseflow  = $(FILE_PATHS:PathOut)/baseflow_totalavg_rhine30min.nc
# in [m3/s]
baseflowInM = True
# if baseflow is in [m] instead of [m3/s] it will be converted


#-------------------------------------------------------
# RUNOFF CONCENTRATION
#-------------------------------------------------------
[RUNOFF_CONCENTRATION]

# using triagular weigthning method
# the bigger the factor, more lag time 
forest_runoff_peaktime = 1.0
grassland_runoff_peaktime = 0.5
irrPaddy_runoff_peaktime = 0.5
irrNonPaddy_runoff_peaktime = 0.5
sealed_runoff_peaktime = 0.15 
water_runoff_peaktime = 0.01

interflow_runoff_peaktime =1.0
baseflow_runoff_peaktime = 2.0

# initial conditions:
# here only 1 layer is shown, but there are up to 10: runoff_concIni


#-------------------------------------------------------
# ROUTING MAPS and PARAMETERSD
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps)/routing

# Number of substep per day
# should be 10 for 0.5 deg but 24 for 0.1 deg

NoRoutingSteps = 10
#kinematic wave parameter: 0.6 is for broad sheet flow
chanBeta = 0.6

# Channel gradient (fraction, dy/dx)
chanGrad = $(PathRouting)/kinematic/changradient.nc
# Minimum channel gradient (for kin. wave: slope cannot be 0)
chanGradMin = 0.0001

#Channel Manning's n
chanMan = $(PathRouting)/kinematic/chanmanning.nc
#Channel length [meters]
chanLength = $(PathRouting)/kinematic/chanlength.nc
#Channel bottom width [meters]
chanWidth = $(PathRouting)/kinematic/chanwidth_null1.tif
#Bankfull channel depth [meters]
chanDepth = $(PathRouting)/kinematic/chanheight_null1.tif

# initial conditions: channelStorageIni, riverbedExchangeIni, dischargeIni  

#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakesRes = $(FILE_PATHS:PathMaps)/routing/lakesreservoirs

# Use reservoirs and lakes (otherwise use only lakes Lake ID=1 and 3 => natural conditions)
useResAndLakes = True
# Reservoirs do have a year of implementation
dynamicLakesRes = True
# if Reservoirs does not have a year of implemtation, which year should be taken as fixed year
fixLakesResYear = 1975


#----------------------------
#Big lakes and Reservoirs

# ID of every lake, reservoir from HydroLakes database
waterBodyID = $(PathLakesRes)/lakesResID.nc
# 1 for lake, 2 for reservoir, 3 for lake and reservoir
waterBodyTyp = $(PathLakesRes)/lakesResType.nc
# Avergae discharge from HydroLakes Database
waterBodyDis = $(PathLakesRes)/lakesResDis.nc

# Lakes surface area from HydroLakes Database 
waterBodyArea = $(PathLakesRes)/lakesResArea.nc
# a factor to scale the outlet of a lake
#lakeAFactor = 1.0  -> calibration

#----------------------------
# Small lakes and reservoirs

useSmallLakes = True

smallLakesRes = $(PathLakesRes)/smallLakesRes.nc
smallwaterBodyDis = $(PathLakesRes)/smallLakesResDis.nc

# averageRunoff in [m] (if not given smallwaterBodyDis is taken instead)
#averageRunoff  = $(FILE_PATHS:PathOut)/runoff_totalavg_cali.nc

# for water demand
#min storage in [m3] (if not give it is calculated)
#minStorage  = $(FILE_PATHS:PathOut)/minsmalllakeStorage_cali.nc


# initial conditions: lakeInflowIni, lakeStorageIni, outLakeIni, lakeOutflowIni, reservoirStorageIni 

#------------------
# Reservoirs
# reservoir volume from HydroLakes database
waterBodyVolRes = $(PathLakesRes)/lakesResVolRes.nc
# reservoir starting year from HydroLakes database 
waterBodyYear = $(PathLakesRes)/lakesResYear.nc

#  Conservative, normal and flood storage limit (fraction of total storage, [-])
conservativeStorageLimit = 0.1
#normalStorageLimit = 0.5   # --> put into calibration
floodStorageLimit = 0.9
# adjusting the balance between normal and flood storage
# [0 ..1]  0: NormalstorageLimit      1: (= closer to flood) results in keeping the normal qoutflow longer constant
adjust_Normal_Flood = 0.5

# Minimum, Normal and Non-damaging reservoir outflow  (fraction of average discharge, [-])
MinOutflowQ = 0.2
NormalOutflowQ = 1.0
NonDamagingOutflowQ = 4.0

# initial conditions: lakeInflowIni, lakeStorageIni, outLakeIni, lakeOutflowIni, reservoirStorageIni 


#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints
In_Dir = $(FILE_PATHS:PathRoot)/in

# nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(In_Dir)/in.map
#InflowPoints = 8.25 49.75 7.75 50.25

# if InflowPoints is a map, this flag is to identify if it is global (False) or local (True)
# observed or simulated input hydrographs as time series [cu m / s]
# Note: that identifiers in time series have to correspond to InflowPoints
# can be several timeseries in one file or different files e.g. main.tss mosel.tss
#QInTS = main1.tss mosel1.tss
QInTS = mm.tss



#-------------------------------------------------------
[ENVIRONMENTALFLOW]
#-------------------------------------------------------

# Either calculate without run with predone discharge (set calc_ef_after = False)
calc_ef_after = True
# Or calculate after run (set calc_ef_after = False) and defining the file to be used
EFDis = $(FILE_PATHS:PathOut)/discharge_rhine.nc

# if predone discharge, do the maps need to be cut to fit to the mask?
cut_ef_map = False

# MAF: Mean, Q90: percentile 90, MMF: monthly average, MQ90: monthly Q90 9averagwed over al Jan, Feb..
# EF_VMF: Environmental flow - variable monthly flow, EF_VMF_LIH - EF- variable monthly flow, high intermediate, low class
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Once = MAF, Q90
#OUT_MAP_12month = MMF, MQ90, EF_VMF, EF_VMF_LIH
#OUT_MAP_12month = MQ90, EF_VMF



#+++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++


[OUTPUT]

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)

#OUT_Map_Daily = modflow_depth1, rejected_recharge_previous_day, sum_gwRecharge_actualM, balance_gw, groundwater_storage_total, nonIrrDemand, totalIrrDemand, domesticDemand, industryDemand, act_irrPaddyDemand, act_irrNonpaddyDemand, dis_outlet, Rain, Snow, act_nonpaddyConsumption, act_paddyConsumption, act_livConsumption, returnflowIrr, returnflowNonIrr, GW_Irrigation, Res_Irrigation, Lake_Irrigation, Channel_Irrigation, GW_Industry, GW_Livestock, GW_Domestic, Res_Industry, Res_Livestock, Res_Domestic, Lake_Industry, Lake_Livestock, Lake_Domestic, Channel_Domestic, Channel_Livestock, Channel_Industry, prefFlow_GW, perc3toGW_GW, leakageIntoGw, leakageIntoRunoff, riverbedExchangeM, lakebedExchangeM, leakage, lakeResInflowM, lakeResOutflowM, act_indConsumption, act_domConsumption, act_livConsumption, act_irrWithdrawal, act_nonIrrWithdrawal, act_domWithdrawal, act_indWithdrawal, act_livWithdrawal, snowEvap, Pumping_daily, modfPumpingM_actual,  groundwater_storage_available, capillar, baseflow, actTransTotal_forest, actTransTotal_grasslands, actTransTotal_paddy, actTransTotal_nonpaddy, unmet_lost, unmetDemand, pot_GroundwaterAbstract, discharge, nonFossilGroundwaterAbs, Precipitation, totalET, EvapoChannel, EvapWaterBodyM, act_nonIrrConsumption, channelStorage, lakeResStorage, totalSto, sum_actTransTotal, sum_actBareSoilEvap, sum_interceptEvap, sum_openWaterEvap, addtoevapotrans, lakeResInflowM, act_bigLakeResAbst, lakeResOutflowM, sum_gwRecharge, sum_capRiseFromGW, baseflow, act_totalIrrConsumption, sum_runoff, returnFlow, act_SurfaceWaterAbstract

OUT_MAP_MonthEnd = groundwater_storage_total, tws, modflow_watertable[0], modflow_watertable[1], modflow_depth0, modflow_depth1
OUT_Map_MonthTot = Rain, totalET, act_indConsumption, act_domConsumption, act_livConsumption, act_irrWithdrawal, act_nonIrrWithdrawal, act_domWithdrawal, act_indWithdrawal, act_livWithdrawal

#OUT_MAP_MonthEnd = groundwater_storage_total, modflow_watertable, tws, groundwater_storage_available, fracVegCover[0], fracVegCover[1], fracVegCover[2], fracVegCover[3], fracVegCover[4], fracVegCover[5], frac_totalIrr, frac_totalnonIrr, availableArableLand, fallowIrr, fallownonIrr, GeneralCrop_Irr, GeneralCrop_nonIrr
OUT_MAP_MonthAvg = tws, ETRef, Tavg
#old
#OUT_MAP_MonthEnd =  balance_gw, tws, modflow_watertable[0], modflow_watertable[1], groundwater_storage_available, modflow_depth0, modflow_depth1

OUT_MAP_TotalEnd = cellArea, modflowtotalSoilThickness, modflow_depth0, modflow_depth1
#modflow_watertable, modflow_depth0_min0, modflow_depth1_min0, modflow_depth0, modflow_depth1,
#modflow_watertable1, modflow_watertable0